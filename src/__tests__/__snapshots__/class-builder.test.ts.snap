// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Class builder works well when adds proper export assignments 1`] = `
"export const AccountRepository = new AccountRepositoryClass();
"
`;

exports[`Class builder works well when matches giving code style 1`] = `
"export class AccountRepositoryClass extends RepositoryBase {
    account(): Promise<IAccountInfo> {
        return this.source.get('/api/account');
    }

    signin(payload: {
            request?: ISignInRequestModel;
        }): Promise<ISignInResponseModel> {
        return this.source.post('/api/account/signin', this.source.getProperty(payload, 'request'));
    }

    agreement(payload: {
            initiator?: string;
            deadlineFrom?: string;
            deadlineTo?: string;
            title?: string;
            createdFrom?: string;
            createdTo?: string;
            status?: string;
            assignedTo?: string;
        }): Promise<IAgreementModel[]> {
        return this.source.get(\`\${ '/api/agreement' }\${ this.source.toQuery(this.source.pick(payload, [
            'initiator',
            'deadlineFrom',
            'deadlineTo',
            'title',
            'createdFrom',
            'createdTo',
            'status',
            'assignedTo'
        ])) }\`);
    }

    details(payload: {
            id: string;
        }): Promise<IDetailsAgreementModel> {
        return this.source.get(this.source.fillPath('/api/agreement/{id}/details', payload));
    }

    delegate(payload: {
            id: string;
            request?: IDelegateTaskModel;
        }): Promise<\\"Unavailable\\" | \\"Success\\" | \\"CannotObtainLock\\" | \\"InvalidUser\\" | \\"Failed\\" | \\"UndefinedError\\"> {
        return this.source.post(this.source.fillPath('/api/outsourcing/{id}/delegate', payload), this.source.getProperty(payload, 'request'));
    }

    logout(): Promise<void> {
        return this.source.post('/api/account/logout');
    }
}
"
`;
